{
    "Resources": {
        "DeployBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
                "AccessControl": "Private"
            },
            "Condition": "EULACondition"
        },
        "DeployBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
                "Bucket": {
                    "Ref": "DeployBucket"
                },
                "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "AWS": {
                                    "Fn::GetAtt": [
                                        "LambdaDeployRole",
                                        "Arn"
                                    ]
                                }
                            },
                            "Action": [
                                "s3:PutObject",
                                "s3:DeleteObject",
                                "s3:DeleteObjectVersion"
                            ],
                            "Resource": {
                                "Fn::Join": [
                                    "",
                                    [
                                        "arn:aws:s3:::",
                                        {
                                            "Ref": "DeployBucket"
                                        },
                                        "/*"
                                    ]
                                ]
                            }
                        },
                        {
                            "Sid": "DenyUnEncryptedObjectUploads",
                            "Effect": "Deny",
                            "Principal": "*",
                            "Action": "s3:PutObject",
                            "Resource": {
                                "Fn::Join": [
                                    "",
                                    [
                                        "arn:aws:s3:::",
                                        {
                                            "Ref": "DeployBucket"
                                        },
                                        "/*"
                                    ]
                                ]
                            },
                            "Condition": {
                                "StringNotEquals": {
                                    "s3:x-amz-server-side-encryption": "AES256"
                                }
                            }
                        },
                        {
                            "Sid": " DenyUnEncryptedInflightOperations",
                            "Effect": "Deny",
                            "Principal": "*",
                            "Action": "s3:*",
                            "Resource": {
                                "Fn::Join": [
                                    "",
                                    [
                                        "arn:aws:s3:::",
                                        {
                                            "Ref": "DeployBucket"
                                        },
                                        "/*"
                                    ]
                                ]
                            },
                            "Condition": {
                                "Bool": {
                                    "aws:SecureTransport": false
                                }
                            }
                        }
                    ]
                }
            },
            "Condition": "EULACondition"
        },
        "LambdaDeployRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "lambda.amazonaws.com"
                                ]
                            },
                            "Action": [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                },
                "Policies": [
                    {
                        "PolicyName": "CloudWatch",
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "logs:CreateLogGroup",
                                        "logs:CreateLogStream",
                                        "logs:DescribeLogGroups",
                                        "logs:DescribeLogStreams",
                                        "logs:PutLogEvents"
                                    ],
                                    "Resource": [
                                        "*"
                                    ]
                                }
                            ]
                        }
                    }
                ]
            },
            "Condition": "EULACondition"
        },
        "StorePasswordLambda": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Description": "Encrypts given string and saves chipper to bucket",
                "Code": {
                    "ZipFile": {
                        "Fn::Join": [
                            "\n",
                            [
                                "import uuid",
                                "import boto3",
                                "import cfnresponse",
                                "",
                                "def createFile(bucket, file, body):",
                                "    s3Client = boto3.client('s3')",
                                "    return s3Client.put_object(",
                                "        Bucket = bucket,",
                                "        Key = file,",
                                "        ServerSideEncryption = 'AES256',",
                                "        Body = body",
                                "    )",
                                "",
                                "def deleteFile(bucket, file):",
                                "    s3Client = boto3.client('s3')",
                                "    return s3Client.delete_object(",
                                "        Bucket = bucket,",
                                "        Key = file",
                                "    )",
                                "",
                                "def lambda_handler(event, context):",
                                "",
                                "    physicalResourceId = str(uuid.uuid4())",
                                "    if 'PhysicalResourceId' in event:",
                                "        physicalResourceId = event['PhysicalResourceId']",
                                "",
                                "    for key in ['PlainText', 'BucketId']:",
                                "        if key not in event['ResourceProperties'] or not event['ResourceProperties'][key]:",
                                "            print 'The properties PlainText and BucketId must not be empty'",
                                "            return cfnresponse.send(event, context, cfnresponse.FAILED, {}, physicalResourceId)",
                                "",
                                "    try:",
                                "        if event['RequestType'] == 'Delete':",
                                "            deleteFile(event['ResourceProperties']['BucketId'], physicalResourceId)",
                                "            print 'The secret file deleted'",
                                "            return cfnresponse.send(event, context, cfnresponse.SUCCESS, {}, physicalResourceId)",
                                "",
                                "        if event['RequestType'] == 'Create':",
                                "            createFile(event['ResourceProperties']['BucketId'], physicalResourceId, event['ResourceProperties']['PlainText'])",
                                "            print 'The secret file created'",
                                "            response = { 'FileId': physicalResourceId }",
                                "            return cfnresponse.send(event, context, cfnresponse.SUCCESS, response, physicalResourceId)",
                                "",
                                "    except Exception as E:",
                                "        print E",
                                "        return cfnresponse.send(event, context, cfnresponse.FAILED, {}, physicalResourceId)"
                            ]
                        ]
                    }
                },
                "Runtime": "python2.7",
                "Handler": "index.lambda_handler",
                "Role": {
                    "Fn::GetAtt": [
                        "LambdaDeployRole",
                        "Arn"
                    ]
                }
            },
            "Condition": "EULACondition"
        },
        "StoreMasterPassword": {
            "Type": "AWS::CloudFormation::CustomResource",
            "Version": "1.0",
            "Properties": {
                "ServiceToken": {
                    "Fn::GetAtt": [
                        "StorePasswordLambda",
                        "Arn"
                    ]
                },
                "BucketId": {
                    "Ref": "DeployBucket"
                },
                "PlainText": {
                    "Ref": "VaultMasterPassword"
                }
            },
            "Condition": "EULACondition",
            "DependsOn": [
                "LambdaDeployRole",
                "DeployBucketPolicy",
                "StorePasswordLambda",
                "DeployBucket"
            ]
        },
        "StoreAdminPassword": {
            "Type": "AWS::CloudFormation::CustomResource",
            "Properties": {
                "ServiceToken": {
                    "Fn::GetAtt": [
                        "StorePasswordLambda",
                        "Arn"
                    ]
                },
                "BucketId": {
                    "Ref": "DeployBucket"
                },
                "PlainText": {
                    "Ref": "VaultAdminPassword"
                }
            },
            "Condition": "EULACondition",
            "DependsOn": [
                "LambdaDeployRole",
                "DeployBucketPolicy",
                "StorePasswordLambda",
                "DeployBucket"
            ]
        },
        "VaultMachine": {
            "Type": "AWS::EC2::Instance",
            "Condition": "",
            "Properties": {
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Ref": "VaultInstanceName"
                        }
                    }
                ],
                "SecurityGroupIds": {
                    "Ref": "VaultInstanceSecurityGroups"
                },
                "SubnetId": {
                    "Ref": "VaultInstanceSubnetId"
                },
                "ImageId": {
                    "Fn::FindInMap": [
                        "RegionMap",
                        {
                            "Ref": "AWS::Region"
                        },
                        "Vault"
                    ]
                },
                "InstanceType": {
                    "Ref": "VaultInstanceType"
                },
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "<script>\n",
                                "cfn-init.exe -v -s ",
                                {
                                    "Ref": "AWS::StackId"
                                },
                                " -r VaultMachine",
                                " --region ",
                                {
                                    "Ref": "AWS::Region"
                                },
                                "\n",
                                "cfn-signal.exe -e %ERRORLEVEL% ",
                                "  --stack ",
                                {
                                    "Ref": "AWS::StackName"
                                },
                                "  --resource VaultMachine",
                                "  --region ",
                                {
                                    "Ref": "AWS::Region"
                                },
                                "\n",
                                "</script>"
                            ]
                        ]
                    }
                },
                "KeyName": {
                    "Ref": "KeyName"
                },
                "IamInstanceProfile": {
                    "Ref": "VaultInstancesProfile"
                }
            },
            "Metadata": {
                "AWS::CloudFormation::Init": {
                    "config": {
                        "files": {
                            "C:\\deploy.py": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "import boto3\n",
                                            "import sys\n",
                                            "import subprocess\n",
                                            "\n",
                                            "def fetchPassword(bucket,filePath):\n",
                                            "\ts3Client = boto3.client('s3', config= boto3.session.Config(signature_version='s3v4'))\n",
                                            "\tobjectResponse = s3Client.get_object(\n",
                                            "\t\tBucket = bucket,\n",
                                            "\t\tKey = filePath\n",
                                            "\t)\n",
                                            "\treturn objectResponse['Body'].read()\n",
                                            "\n",
                                            "def downloadFile(bucket,filePath,target):\n",
                                            "\ts3Client = boto3.client('s3')\n",
                                            "\ts3Client.download_file(\n",
                                            "\t\tBucket = bucket,\n",
                                            "\t\tKey = filePath,\n",
                                            "\t\tFilename = target\n",
                                            "\t)\n",
                                            "\treturn target\n",
                                            "\n",
                                            "masterp = fetchPassword('",
                                            {
                                                "Ref": "DeployBucket"
                                            },
                                            "','",
                                            {
                                                "Fn::GetAtt": [
                                                    "StoreMasterPassword",
                                                    "FileId"
                                                ]
                                            },
                                            "')\n",
                                            "adminp = fetchPassword('",
                                            {
                                                "Ref": "DeployBucket"
                                            },
                                            "','",
                                            {
                                                "Fn::GetAtt": [
                                                    "StoreAdminPassword",
                                                    "FileId"
                                                ]
                                            },
                                            "')\n",
                                            "drp = fetchPassword('",
                                            {
                                                "Ref": "DeployBucket"
                                            },
                                            "','",
                                            {
                                                "Fn::GetAtt": [
                                                    "StoreDRPassword",
                                                    "FileId"
                                                ]
                                            },
                                            "')\n",
                                            "\n",
                                            "licensef = downloadFile('",
                                            {
                                                "Ref": "VaultFilesBucket"
                                            },
                                            "','",
                                            {
                                                "Ref": "LicenseFile"
                                            },
                                            "','C:\\\\vaultLicense.xml')\n",
                                            "publickeyf = downloadFile('",
                                            {
                                                "Ref": "VaultFilesBucket"
                                            },
                                            "','",
                                            {
                                                "Ref": "RecoveryPublicKey"
                                            },
                                            "','C:\\\\recoveryPublic.key')\n",
                                            "\n",
                                            "sys.exit(subprocess.call([",
                                            "'C:\\\\Program files (x86)\\\\PrivateArk\\\\Server\\\\CAVaultManager.exe',",
                                            "'PostInstall',",
                                            "'/AdminPass',",
                                            "adminp,",
                                            "'/MasterPass',",
                                            "masterp,",
                                            "'/RecPub',",
                                            "publickeyf,",
                                            "'/IsPrimaryOrDR',",
                                            "'Primary',",
                                            "'/PrimaryVaultIP',",
                                            "'1.1.1.1',",
                                            "'/DRPassword',",
                                            "drp,",
                                            "'/EnableFailOver',",
                                            "'/LicensePath',",
                                            "licensef,",
                                            "'/AcceptEULA',",
                                            "'yes',",
											"'/KMSRegion','",
											{
												"Ref": "AWS::Region"
											},
                                            "']))\n"
                                        ]
                                    ]
                                }
                            }
                        },
                        "commands": {
                            "1-deploy": {
                                "command": "C:\\Python27\\python.exe C:\\deploy.py",
								"waitAfterCompletion": "0"
                            }
                        }
                    }
                }
            },
            "CreationPolicy": {
                "ResourceSignal": {
                    "Timeout": "PT15M"
                }
            },
            "DependsOn": [
                "StoreMasterPassword",
                "StoreAdminPassword",
                "StoreDRPassword"
            ],
            "DeletionPolicy": "Retain"
        },
        "VaultDRMachine": {
            "Type": "AWS::EC2::Instance",
            "Properties": {
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Join": [
                                " ",
                                [
                                    {
                                        "Ref": "VaultInstanceName"
                                    },
                                    "DR"
                                ]
                            ]
                        }
                    }
                ],
                "SecurityGroupIds": {
                    "Ref": "VaultInstanceSecurityGroups"
                },
                "SubnetId": {
                    "Ref": "DRInstanceSubnetId"
                },
                "ImageId": {
                    "Fn::FindInMap": [
                        "RegionMap",
                        {
                            "Ref": "AWS::Region"
                        },
                        "Vault"
                    ]
                },
                "InstanceType": {
                    "Ref": "VaultInstanceType"
                },
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "<script>\n",
                                "cfn-init.exe -v -s ",
                                {
                                    "Ref": "AWS::StackId"
                                },
                                " -r VaultDRMachine",
                                " --region ",
                                {
                                    "Ref": "AWS::Region"
                                },
                                "\n",
                                "cfn-signal.exe -e %ERRORLEVEL% ",
                                "  --stack ",
                                {
                                    "Ref": "AWS::StackName"
                                },
                                "  --resource VaultDRMachine",
                                "  --region ",
                                {
                                    "Ref": "AWS::Region"
                                },
                                "\n",
                                "</script>"
                            ]
                        ]
                    }
                },
                "KeyName": {
                    "Ref": "KeyName"
                },
                "IamInstanceProfile": {
                    "Ref": "VaultInstancesProfile"
                }
            },
            "Metadata": {
                "AWS::CloudFormation::Init": {
                    "config": {
                        "files": {
                            "C:\\deploy.py": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "import boto3\n",
                                            "import sys\n",
                                            "import subprocess\n",
                                            "\n",
                                            "def fetchPassword(bucket,filePath):\n",
                                            "\ts3Client = boto3.client('s3', config= boto3.session.Config(signature_version='s3v4'))\n",
                                            "\tobjectResponse = s3Client.get_object(\n",
                                            "\t\tBucket = bucket,\n",
                                            "\t\tKey = filePath\n",
                                            "\t)\n",
                                            "\treturn objectResponse['Body'].read()\n",
                                            "\n",
                                            "def downloadFile(bucket,filePath,target):\n",
                                            "\ts3Client = boto3.client('s3')\n",
                                            "\ts3Client.download_file(\n",
                                            "\t\tBucket = bucket,\n",
                                            "\t\tKey = filePath,\n",
                                            "\t\tFilename = target\n",
                                            "\t)\n",
                                            "\treturn target\n",
                                            "\n",
                                            "masterp = fetchPassword('",
                                            {
                                                "Ref": "DeployBucket"
                                            },
                                            "','",
                                            {
                                                "Fn::GetAtt": [
                                                    "StoreMasterPassword",
                                                    "FileId"
                                                ]
                                            },
                                            "')\n",
                                            "adminp = fetchPassword('",
                                            {
                                                "Ref": "DeployBucket"
                                            },
                                            "','",
                                            {
                                                "Fn::GetAtt": [
                                                    "StoreAdminPassword",
                                                    "FileId"
                                                ]
                                            },
                                            "')\n",
                                            "drp = fetchPassword('",
                                            {
                                                "Ref": "DeployBucket"
                                            },
                                            "','",
                                            {
                                                "Fn::GetAtt": [
                                                    "StoreDRPassword",
                                                    "FileId"
                                                ]
                                            },
                                            "')\n",
                                            "\n",
                                            "licensef = downloadFile('",
                                            {
                                                "Ref": "VaultFilesBucket"
                                            },
                                            "','",
                                            {
                                                "Ref": "LicenseFile"
                                            },
                                            "','C:\\\\vaultLicense.xml')\n",
                                            "publickeyf = downloadFile('",
                                            {
                                                "Ref": "VaultFilesBucket"
                                            },
                                            "','",
                                            {
                                                "Ref": "RecoveryPublicKey"
                                            },
                                            "','C:\\\\recoveryPublic.key')\n",
                                            "\n",
                                            "vaultIp = '",
                                            {
                                                "Fn::GetAtt": [
                                                    "VaultMachine",
                                                    "PrivateIp"
                                                ]
                                            },
                                            "'\n",
                                            "sys.exit(subprocess.call([",
                                            "'C:\\\\Program files (x86)\\\\PrivateArk\\\\Server\\\\CAVaultManager.exe',",
                                            "'PostInstall',",
                                            "'/AdminPass',",
                                            "adminp,",
                                            "'/MasterPass',",
                                            "masterp,",
                                            "'/RecPub',",
                                            "publickeyf,",
                                            "'/IsPrimaryOrDR',",
                                            "'DR',",
                                            "'/PrimaryVaultIP',",
                                            "vaultIp,",
                                            "'/DRPassword',",
                                            "drp,",
                                            "'/EnableFailOver',",
                                            "'/LicensePath',",
                                            "licensef,",
                                            "'/AcceptEULA',",
                                            "'yes',",
											"'/KMSRegion','",
											{
												"Ref": "AWS::Region"
											},
                                            "']))\n"
                                        ]
                                    ]
                                }
                            },
                            "C:\\clean.py": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "import boto3\n",
                                            "\n",
                                            "def deleteFile(bucket,filePath):\n",
                                            "\ts3Client = boto3.client('s3', config= boto3.session.Config(signature_version='s3v4'))\n",
                                            "\treturn s3Client.delete_object(\n",
                                            "\t\tBucket = bucket,\n",
                                            "\t\tKey = filePath\n",
                                            "\t)",
                                            "\n",
                                            "print deleteFile('",
                                            {
                                                "Ref": "DeployBucket"
                                            },
                                            "','",
                                            {
                                                "Fn::GetAtt": [
                                                    "StoreMasterPassword",
                                                    "FileId"
                                                ]
                                            },
                                            "')\n",
                                            "print deleteFile('",
                                            {
                                                "Ref": "DeployBucket"
                                            },
                                            "','",
                                            {
                                                "Fn::GetAtt": [
                                                    "StoreDRPassword",
                                                    "FileId"
                                                ]
                                            },
                                            "')\n"
                                        ]
                                    ]
                                }
                            }
                        },
                        "commands": {
                            "1-deploy": {
                                "command": "C:\\Python27\\python.exe C:\\deploy.py",
								"waitAfterCompletion": "0"
                            },
                            "2-clean": {
                                "command": "C:\\Python27\\python.exe C:\\clean.py",
								"waitAfterCompletion": "0"
                            }
                        }
                    }
                }
            },
            "DependsOn": [
                "VaultMachine"
            ],
            "CreationPolicy": {
                "ResourceSignal": {
                    "Timeout": "PT15M"
                }
            },
            "Condition": "",
            "DeletionPolicy": "Retain"
        },
        "StoreDRPassword": {
            "Type": "AWS::CloudFormation::CustomResource",
            "Properties": {
                "ServiceToken": {
                    "Fn::GetAtt": [
                        "StorePasswordLambda",
                        "Arn"
                    ]
                },
                "BucketId": {
                    "Ref": "DeployBucket"
                },
                "PlainText": {
                    "Ref": "VaultDRPassword"
                }
            },
            "Condition": "EULACondition",
            "DependsOn": [
                "LambdaDeployRole",
                "DeployBucketPolicy",
                "StorePasswordLambda",
                "DeployBucket"
            ]
        },
        "VaultInstancesProfile": {
            "Type": "AWS::IAM::InstanceProfile",
            "Properties": {
                "Path": "/",
                "Roles": [
                    {
                        "Ref": "VaultInstancesRole"
                    }
                ]
            },
            "Condition": "EULACondition",
            "DeletionPolicy": "Retain"
        },
        "ComponentInstanceProfile": {
            "Type": "AWS::IAM::InstanceProfile",
            "Properties": {
                "Roles": [
                    {
                        "Ref": "ComponentInstanceRole"
                    }
                ]
            },
            "Condition": "EULACondition",
            "DeletionPolicy": "Retain"
        },
        "ComponentInstanceRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "ec2.amazonaws.com"
                                ]
                            },
                            "Action": [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                },
                "Path": "/"
            },
            "Condition": "EULACondition",
            "DeletionPolicy": "Retain"
        },
        "CPMMachine": {
            "Type": "AWS::EC2::Instance",
            "Properties": {
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Ref": "CPMInstanceName"
                        }
                    }
                ],
                "SecurityGroupIds": {
                    "Ref": "CPMInstanceSecurityGroups"
                },
                "SubnetId": {
                    "Ref": "CPMInstanceSubnetId"
                },
                "ImageId": {
                    "Fn::FindInMap": [
                        "RegionMap",
                        {
                            "Ref": "AWS::Region"
                        },
                        "Components"
                    ]
                },
                "InstanceType": {
                    "Ref": "CPMInstanceType"
                },
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "<script>\n",
                                "cfn-init.exe -v -s ",
                                {
                                    "Ref": "AWS::StackId"
                                },
                                " -r CPMMachine",
                                " --region ",
                                {
                                    "Ref": "AWS::Region"
                                },
                                "\n",
                                "cfn-signal.exe -e %ERRORLEVEL% ",
                                "  --stack ",
                                {
                                    "Ref": "AWS::StackName"
                                },
                                "  --resource CPMMachine",
                                "  --region ",
                                {
                                    "Ref": "AWS::Region"
                                },
                                "\n",
                                "</script>"
                            ]
                        ]
                    }
                },
                "KeyName": {
                    "Ref": "KeyName"
                },
                "IamInstanceProfile": {
                    "Ref": "ComponentInstanceProfile"
                }
            },
            "Metadata": {
                "AWS::CloudFormation::Init": {
                    "config": {
                        "files": {
                            "C:\\deploy.py": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "import sys\n",
                                            "import subprocess\n",
                                            "\n",
                                            "callArray = [",
                                            "'C:\\\\CyberArk\\\\Components Registration\\\\RegisterComponent.exe',",
                                            "'CPM',",
                                            "'/accepteula',",
                                            "'Yes',",
                                            "'/vaultip',",
                                            "'",
                                            {
                                                "Fn::GetAtt": [
                                                    "VaultMachine",
                                                    "PrivateIp"
                                                ]
                                            },
											",",
											{
                                                "Fn::GetAtt": [
                                                    "VaultDRMachine",
                                                    "PrivateIp"
                                                ]
                                            },
                                            "',",
                                            "'/vaultport',",
                                            "'1858',",
                                            "'/vaultuser',",
                                            "'Administrator',",
                                            "'/bucketname',",
                                            "'",
                                            {
                                                "Ref": "DeployBucket"
                                            },
                                            "',",
                                            "'/objectkey',",
                                            "'",
                                            {
                                                "Fn::GetAtt": [
                                                    "StoreAdminPassword",
                                                    "FileId"
                                                ]
                                            },
                                            "']\n",
                                            "sys.exit(subprocess.call(callArray, cwd='C:\\CyberArk\\Components Registration'))\n"
                                        ]
                                    ]
                                }
                            }
                        },
                        "commands": {
                            "1-deploy": {
                                "command": "C:\\Python27\\python.exe C:\\deploy.py",
								"waitAfterCompletion": "0"
                            },
                            "2-CPMserviceConfig": {
                                "command": "sc config \"CyberArk Password Manager\" start=auto",
								"waitAfterCompletion": "0"
                            },
                            "3-CPMSserviceConfig": {
                                "command": "sc config \"CyberArk Central Policy Manager Scanner\" start=auto",
								"waitAfterCompletion": "0"
                            },
                            "4-CPMserviceStart": {
                                "command": "sc start \"CyberArk Password Manager\"",
								"waitAfterCompletion": "0"
                            },
                            "5-CPMSserviceStart": {
                                "command": "sc start \"CyberArk Central Policy Manager Scanner\"",
								"waitAfterCompletion": "0"
                            }
                        }
                    }
                }
            },
            "DependsOn": [
                "VaultDRMachine"
            ],
            "Condition": "",
            "CreationPolicy": {
                "ResourceSignal": {
                    "Timeout": "PT15M"
                }
            },
            "DeletionPolicy": "Retain"
        },
        "PVWAMachine": {
            "Type": "AWS::EC2::Instance",
            "Properties": {
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Ref": "PVWAInstanceName"
                        }
                    }
                ],
                "SecurityGroupIds": {
                    "Ref": "PVWAInstanceSecurityGroups"
                },
                "SubnetId": {
                    "Ref": "PVWAInstanceSubnetId"
                },
                "ImageId": {
                    "Fn::FindInMap": [
                        "RegionMap",
                        {
                            "Ref": "AWS::Region"
                        },
                        "Components"
                    ]
                },
                "InstanceType": {
                    "Ref": "PVWAInstanceType"
                },
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "<script>\n",
                                "cfn-init.exe -v -s ",
                                {
                                    "Ref": "AWS::StackId"
                                },
                                " -r PVWAMachine",
                                " --region ",
                                {
                                    "Ref": "AWS::Region"
                                },
                                "\n",
                                "cfn-signal.exe -e %ERRORLEVEL% ",
                                "  --stack ",
                                {
                                    "Ref": "AWS::StackName"
                                },
                                "  --resource PVWAMachine",
                                "  --region ",
                                {
                                    "Ref": "AWS::Region"
                                },
                                "\n",
                                "</script>"
                            ]
                        ]
                    }
                },
                "KeyName": {
                    "Ref": "KeyName"
                },
                "IamInstanceProfile": {
                    "Ref": "ComponentInstanceProfile"
                }
            },
            "Metadata": {
                "AWS::CloudFormation::Init": {
                    "config": {
                        "files": {
                            "C:\\deploy.py": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "import sys\n",
                                            "import subprocess\n",
                                            "\n",
                                            "callArray = [",
                                            "'C:\\\\CyberArk\\\\Components Registration\\\\RegisterComponent.exe',",
                                            "'PVWA',",
                                            "'/accepteula',",
                                            "'Yes',",
                                            "'/vaultip',",
                                            "'",
                                            {
                                                "Fn::GetAtt": [
                                                    "VaultMachine",
                                                    "PrivateIp"
                                                ]
                                            },
											",",
											{
                                                "Fn::GetAtt": [
                                                    "VaultDRMachine",
                                                    "PrivateIp"
                                                ]
                                            },
                                            "',",
                                            "'/vaultport',",
                                            "'1858',",
                                            "'/vaultuser',",
                                            "'Administrator',",
                                            "'/bucketname',",
                                            "'",
                                            {
                                                "Ref": "DeployBucket"
                                            },
                                            "',",
                                            "'/objectkey',",
                                            "'",
                                            {
                                                "Fn::GetAtt": [
                                                    "StoreAdminPassword",
                                                    "FileId"
                                                ]
                                            },
                                            "']\n",
                                            "sys.exit(subprocess.call(callArray, cwd='C:\\CyberArk\\Components Registration'))\n"
                                        ]
                                    ]
                                }
                            }
                        },
                        "commands": {
                            "1-deploy": {
                                "command": "C:\\Python27\\python.exe C:\\deploy.py",
								"waitAfterCompletion": "0"
                            },
                            "2-startAppPool": {
                                "command": "powershell -command \"& {&'Import-Module' WebAdministration}\"; \"& {&'Start-WebAppPool' -Name PasswordVaultWebAccessPool}\"; \"& {&'Set-ItemProperty' -Path IIS:\\AppPools\\PasswordVaultWebAccessPool -Name autoStart -Value 'true'}\"",
								"waitAfterCompletion": "0"
                            },
                            "3-CSTserviceConfig": {
                                "command": "sc config \"CyberArk Scheduled Tasks\" start=auto",
								"waitAfterCompletion": "0"
                            },
                            "4-CSTserviceStart": {
                                "command": "sc start \"CyberArk Scheduled Tasks\"",
								"waitAfterCompletion": "0"
                            }
                        }
                    }
                }
            },
            "DependsOn": [
                "CPMMachine"
            ],
            "CreationPolicy": {
                "ResourceSignal": {
                    "Timeout": "PT15M"
                }
            },
            "DeletionPolicy": "Retain"
        },
        "PSMMachine": {
            "Type": "AWS::EC2::Instance",
            "Properties": {
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Ref": "PSMInstanceName"
                        }
                    }
                ],
                "SecurityGroupIds": {
                    "Ref": "PSMInstanceSecurityGroups"
                },
                "SubnetId": {
                    "Ref": "PSMInstanceSubnetId"
                },
                "ImageId": {
                    "Fn::FindInMap": [
                        "RegionMap",
                        {
                            "Ref": "AWS::Region"
                        },
                        "Components"
                    ]
                },
                "InstanceType": {
                    "Ref": "PSMInstanceType"
                },
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "<script>\n",
                                "cfn-init.exe -v -s ",
                                {
                                    "Ref": "AWS::StackId"
                                },
                                " -r PSMMachine",
                                " --region ",
                                {
                                    "Ref": "AWS::Region"
                                },
                                "\n",
                                "cfn-signal.exe -e %ERRORLEVEL% ",
                                "  --stack ",
                                {
                                    "Ref": "AWS::StackName"
                                },
                                "  --resource PSMMachine",
                                "  --region ",
                                {
                                    "Ref": "AWS::Region"
                                },
                                "\n",
                                "</script>"
                            ]
                        ]
                    }
                },
                "KeyName": {
                    "Ref": "KeyName"
                },
                "IamInstanceProfile": {
                    "Ref": "ComponentInstanceProfile"
                }
            },
            "Metadata": {
                "AWS::CloudFormation::Init": {
                    "config": {
                        "files": {
                            "C:\\deploy.py": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "import sys\n",
                                            "import subprocess\n",
                                            "import urllib2\n",
                                            "\n",
                                            "callArray = [",
                                            "'C:\\\\CyberArk\\\\Components Registration\\\\RegisterComponent.exe',",
                                            "'PSM',",
                                            "'/accepteula',",
                                            "'Yes',",
                                            "'/vaultip',",
                                            "'",
                                            {
                                                "Fn::GetAtt": [
                                                    "VaultMachine",
                                                    "PrivateIp"
                                                ]
                                            },
											",",
											{
                                                "Fn::GetAtt": [
                                                    "VaultDRMachine",
                                                    "PrivateIp"
                                                ]
                                            },
                                            "',",
                                            "'/vaultport',",
                                            "'1858',",
                                            "'/vaultuser',",
                                            "'Administrator',",
                                            "'/bucketname',",
                                            "'",
                                            {
                                                "Ref": "DeployBucket"
                                            },
                                            "',",
                                            "'/objectkey',",
                                            "'",
                                            {
                                                "Fn::GetAtt": [
                                                    "StoreAdminPassword",
                                                    "FileId"
                                                ]
                                            },
                                            "']\n",
                                            "properties = urllib2.urlopen('http://169.254.169.254/latest/meta-data').read()\n",
                                            "if 'public-ipv4' in properties:\n",
                                            "\tipv4 = urllib2.urlopen('http://169.254.169.254/latest/meta-data/public-ipv4').read()\n",
                                            "\tif ipv4 and ipv4 <> 'none':\n",
                                            "\t\tcallArray.append('/psmpublicip')\n",
                                            "\t\tcallArray.append(ipv4)\n",
                                            "sys.exit(subprocess.call(callArray, cwd='C:\\CyberArk\\Components Registration'))\n"
                                        ]
                                    ]
                                }
                            }
                        },
                        "commands": {
                            "1-deploy": {
                                "command": "C:\\Python27\\python.exe C:\\deploy.py",
								"waitAfterCompletion": "0"
                            },
                            "2-PSMserviceConfig": {
                                "command": "sc config \"Cyber-Ark Privileged Session Manager\" start=auto",
								"waitAfterCompletion": "0"
                            },
                            "3-PSMserviceStart": {
                                "command": "sc start \"Cyber-Ark Privileged Session Manager\"",
								"waitAfterCompletion": "0"
                            }
                        }
                    }
                }
            },
            "DependsOn": [
                "PVWAMachine"
            ],
            "CreationPolicy": {
                "ResourceSignal": {
                    "Timeout": "PT15M"
                }
            },
            "DeletionPolicy": "Retain"
        },
		"PSMPMachine": {
            "Type": "AWS::EC2::Instance",
            "Properties": {
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Ref": "PSMPInstanceName"
                        }
                    }
                ],
                "SecurityGroupIds": {
                    "Ref": "PSMPInstanceSecurityGroups"
                },
                "SubnetId": {
                    "Ref": "PSMPInstanceSubnetId"
                },
                "ImageId": {
                    "Fn::FindInMap": [
                        "RegionMap",
                        {
                            "Ref": "AWS::Region"
                        },
                        "PSMP"
                    ]
                },
                "InstanceType": {
                    "Ref": "PSMPInstanceType"
                },
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "#!/bin/bash -e\n",
								"yum update -y aws-cfn-bootstrap\n",

								"/opt/aws/bin/cfn-init -v ",
								"         --stack ", { "Ref" : "AWS::StackName" },
								"         --resource PSMPMachine ",
								"         --region ", { "Ref" : "AWS::Region" }, "\n",

								"/opt/aws/bin/cfn-signal -e $? ",
								"         --stack ", { "Ref" : "AWS::StackName" },
								"         --resource PSMPMachine ",
								"         --region ", { "Ref" : "AWS::Region" }, "\n"
                            ]
                        ]
                    }
                },
                "KeyName": {
                    "Ref": "KeyName"
                },
                "IamInstanceProfile": {
                    "Ref": "ComponentInstanceProfile"
                }
            },
            "Metadata": {
                "AWS::CloudFormation::Init": {
                    "config": {
                        "files": {
                            "/tmp/PSMPInstall/activatePSMP": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
											"#!/bin/bash -e\n",
											"chmod 700 /tmp/PSMPInstall/register_and_activation.sh\n",
											"aws configure set default.s3.signature_version s3v4\n",
											"aws s3api get-object --bucket ",
												{
													"Ref": "DeployBucket"
												},
												" --key ", 
												{
													"Fn::GetAtt": [
														"StoreAdminPassword",
														"FileId"
													]
												},
												" /tmp/PSMPInstall/temppassword\n",
											"echo Object successfully retrieved from S3 bucket.\n",
											
											"/opt/CARKpsmp/bin/createcredfile /tmp/PSMPInstall/user.cred Password -Username Administrator -Password $(cat /tmp/PSMPInstall/temppassword) -Hostname\n",
											"echo Credentials file successfully created.\n",
											
											"shred -u /tmp/PSMPInstall/temppassword\n",
											"aws s3api delete-object --bucket ",
												{
													"Ref": "DeployBucket"
												},
												" --key ",
												{
													"Fn::GetAtt": [
														"StoreAdminPassword",
														"FileId"
													]
												},
												"\n",
											"echo Object successfully deleted from S3 bucket.\n",
											
											"/tmp/PSMPInstall/register_and_activation.sh /tmp/PSMPInstall/user.cred ",
												{
													"Fn::GetAtt": [
														"VaultMachine",
														"PrivateIp"
													]
												},
												",",
												{
													"Fn::GetAtt": [
														"VaultDRMachine",
														"PrivateIp"
													]
												},
												" $(curl http://169.254.169.254/latest/meta-data/instance-id) y\n"
                                        ]
                                    ]
                                }
                            }
                        },
                        "commands": {
							"01-Chmod": {
                                "command": "sudo chmod 700 /tmp/PSMPInstall/activatePSMP"
                            },
                            "02-PSMPdeploy": {
                                "command": "sudo /tmp/PSMPInstall/activatePSMP"
                            },
							"03-ClearData": {
                                "command": "sudo shred -u /tmp/PSMPInstall/activatePSMP"
                            },
							"04-RemoveInstallationFolder": {
                                "command": "sudo rm -rf /tmp/PSMPInstall/"
                            }
                        }
                    }
                }
            },
            "DependsOn": [
                "PSMMachine"
            ],
            "Condition": "",
            "CreationPolicy": {
                "ResourceSignal": {
                    "Timeout": "PT10M"
                }
            },
			"DeletionPolicy": "Retain"
        },
        "VaultInstancesRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "ec2.amazonaws.com"
                                ]
                            },
                            "Action": [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                },
                "Path": "/"
            },
            "Condition": "EULACondition",
            "DeletionPolicy": "Retain"
        },
        "ComponentS3DeployBucketPolicy": {
            "Type": "AWS::IAM::Policy",
            "Properties": {
                "PolicyName": "ComponentInstancesDeployBucketAccess",
                "PolicyDocument": {
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Action": [
                                "s3:GetObject",
                                "s3:GetObjectVersion",
                                "s3:DeleteObject",
                                "s3:DeleteObjectVersion"
                            ],
                            "Resource": {
                                "Fn::Join": [
                                    "",
                                    [
                                        "arn:aws:s3:::",
                                        {
                                            "Ref": "DeployBucket"
                                        },
                                        "/",
                                        {
                                            "Fn::GetAtt": [
                                                "StoreAdminPassword",
                                                "FileId"
                                            ]
                                        }
                                    ]
                                ]
                            }
                        }
                    ]
                },
                "Roles": [
                    {
                        "Ref": "ComponentInstanceRole"
                    }
                ]
            },
            "Condition": "EULACondition"
        },
        "VaultInstancesKMSPolicy": {
            "Type": "AWS::IAM::Policy",
            "Properties": {
                "PolicyName": "VaultInstancesKMSAccess",
                "PolicyDocument": {
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Action": [
                                "kms:Encrypt",
                                "kms:Decrypt"
                            ],
                            "Resource": "*"
                        }
                    ]
                },
                "Roles": [
                    {
                        "Ref": "VaultInstancesRole"
                    }
                ]
            },
            "Condition": "EULACondition",
            "DeletionPolicy": "Retain"
        },
        "VaultInstancesS3VaultFilesBucketPolicy": {
            "Type": "AWS::IAM::Policy",
            "Properties": {
                "PolicyName": "VaultFilesBucketAccess",
                "PolicyDocument": {
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Action": [
                                "s3:GetObject",
                                "s3:GetObjectVersion"
                            ],
                            "Resource": {
                                "Fn::Join": [
                                    "",
                                    [
                                        "arn:aws:s3:::",
                                        {
                                            "Ref": "VaultFilesBucket"
                                        },
                                        "/*"
                                    ]
                                ]
                            }
                        }
                    ]
                },
                "Roles": [
                    {
                        "Ref": "VaultInstancesRole"
                    }
                ]
            },
            "Condition": "EULACondition"
        },
        "VaultInstancesS3DeployBucketPolicy": {
            "Type": "AWS::IAM::Policy",
            "Properties": {
                "PolicyName": "VaultInsancesDeployBucketAccess",
                "PolicyDocument": {
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Action": [
                                "s3:GetObject",
                                "s3:GetObjectVersion",
                                "s3:DeleteObject",
                                "s3:DeleteObjectVersion"
                            ],
                            "Resource": {
                                "Fn::Join": [
                                    "",
                                    [
                                        "arn:aws:s3:::",
                                        {
                                            "Ref": "DeployBucket"
                                        },
                                        "/*"
                                    ]
                                ]
                            }
                        }
                    ]
                },
                "Roles": [
                    {
                        "Ref": "VaultInstancesRole"
                    }
                ]
            },
            "Condition": "EULACondition"
        },
        "VaultBootstrapKMSPolicy": {
            "Type": "AWS::IAM::Policy",
            "Properties": {
                "PolicyName": "VaultBootstrapKMSAccess",
                "PolicyDocument": {
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Action": [
                                "kms:CreateKey",
                                "kms:GenerateRandom"
                            ],
                            "Resource": "*"
                        }
                    ]
                },
                "Roles": [
                    {
                        "Ref": "VaultInstancesRole"
                    }
                ]
            }
        }
    },
    "Parameters": {
        "EULA": {
            "Type": "String",
            "Description": "I have read and agree to the Terms and Conditions.",
            "AllowedValues": [
                "Accept",
                "Decline"
            ],
            "Default": "Decline"
        },
        "KeyName": {
            "Type": "AWS::EC2::KeyPair::KeyName",
            "Description": "Select an existing Key Pair from your AWS account.",
            "ConstraintDescription": "Can contain only ASCII characters."
        },
        "VaultFilesBucket": {
            "Type": "String",
            "Description": "Enter the name of the bucket containing the license and recovery public key."
        },
        "LicenseFile": {
            "Type": "String",
            "Description": "Enter the path of the license file within the bucket.",
            "Default": "license.xml"
        },
        "RecoveryPublicKey": {
            "Type": "String",
            "Description": "Enter the path of the recovery public key file within the bucket.",
            "Default": "recpub.key"
        },
        "VaultInstanceName": {
            "Type": "String",
            "Description": "Enter a name for the Vault instance.",
            "Default": "CyberArk Vault"
        },
        "VaultMasterPassword": {
            "Type": "String",
            "Description": "Enter a password for the Vault Master user.",
            "NoEcho": true,
            "MinLength": 8,
            "AllowedPattern": "^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[~!@#$%^&\\*\\(\\)_\\-+=:])(?=\\S+$).{8,}$",
            "ConstraintDescription": "Vault Master password must contain at least 1 lowercase letter, 1 uppercase letter, 1 digit and 1 special character"
        },
	"RetypeMasterPassword": {
            "Type": "String",
            "Description": "Retype the password for the Vault Master user.",
            "NoEcho": true,
            "MinLength": 8
        },
        "VaultAdminPassword": {
            "Type": "String",
            "Description": "Enter a password for the Vault Administrator user.",
            "NoEcho": true,
	    "MinLength": 8,
	    "AllowedPattern": "^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[~!@#$%^&\\*\\(\\)_\\-+=:])(?=\\S+$).{8,}$",
	    "ConstraintDescription": "Vault Administrator password must contain at least 1 lowercase letter, 1 uppercase letter, 1 digit and 1 special character"
        },
	"RetypeAdminPassword": {
            "Type": "String",
            "Description": "Retype the password for the Vault Administrator user.",
            "NoEcho": true,
            "MinLength": 8
        },
	"VaultDRPassword": {
            "Type": "String",
            "Description": "Enter a password for the Vault DR user.",
            "NoEcho": true,
            "MinLength": 8,
	    "AllowedPattern": "^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[~!@#$%^&\\*\\(\\)_\\-+=:])(?=\\S+$).{8,}$",
	    "ConstraintDescription": "Vault DR password must contain at least 1 lowercase letter, 1 uppercase letter, 1 digit and 1 special character"
        },
	"RetypeDRPassword": {
            "Type": "String",
            "Description": "Retype the password for the Vault DR user.",
            "NoEcho": true,
            "MinLength": 8
        },
        "VaultInstanceType": {
            "Type": "String",
            "Description": "Select the instance type of the Vault instance.",
            "AllowedValues": [
                "m4.large",
                "m4.xlarge",
                "m4.2xlarge",
                "m4.4xlarge"
            ],
            "Default": "m4.large"
        },
        "VaultInstanceSecurityGroups": {
            "Type": "List<AWS::EC2::SecurityGroup::Id>",
            "Description": "Assign Security Groups to the Vault and Vault DR instances."
        },
        "VaultInstanceSubnetId": {
            "Type": "AWS::EC2::Subnet::Id",
            "Description": "Select the Subnet Id where the Vault instance will reside."
        },
        "DRInstanceSubnetId": {
            "Type": "AWS::EC2::Subnet::Id",
            "Description": "Select the Subnet Id where the Vault DR instance will reside."
        },
        "CPMInstanceName": {
            "Type": "String",
            "Description": "Enter a name for the CPM instance.",
            "Default": "CyberArk CPM"
        },
        "CPMInstanceType": {
            "Type": "String",
            "Description": "Select the instance type of the CPM instance.",
            "AllowedValues": [
                "c4.large",
                "c4.xlarge",
                "c4.2xlarge",
                "c4.4xlarge"
            ],
            "Default": "c4.large"
        },
        "CPMInstanceSecurityGroups": {
            "Type": "List<AWS::EC2::SecurityGroup::Id>",
            "Description": "Assign Security Groups to the CPM instance."
        },
        "CPMInstanceSubnetId": {
            "Type": "AWS::EC2::Subnet::Id",
            "Description": "Select the Subnet Id where the CPM instance will reside."
        },
        "PVWAInstanceName": {
            "Type": "String",
            "Description": "Enter a name for the PVWA instance.",
            "Default": "CyberArk PVWA"
        },
        "PVWAInstanceType": {
            "Type": "String",
            "Description": "Select the instance type of the PVWA instance.",
            "AllowedValues": [
                "t2.medium",
                "t2.large",
                "t2.xlarge",
                "t2.2xlarge"
            ],
            "Default": "t2.medium"
        },
        "PVWAInstanceSecurityGroups": {
            "Type": "List<AWS::EC2::SecurityGroup::Id>",
            "Description": "Assign Security Groups to the PVWA instance."
        },
        "PVWAInstanceSubnetId": {
            "Type": "AWS::EC2::Subnet::Id",
            "Description": "Select the Subnet Id where the PVWA instance will reside."
        },
        "PSMInstanceName": {
            "Type": "String",
            "Description": "Enter a name for the PSM instance.",
            "Default": "CyberArk PSM"
        },
        "PSMInstanceType": {
            "Type": "String",
            "Description": "Select the instance type of the PSM instance.",
            "AllowedValues": [
                "c4.2xlarge",
                "c4.4xlarge",
                "c4.8xlarge"
            ],
            "Default": "c4.2xlarge"
        },
        "PSMInstanceSecurityGroups": {
            "Type": "List<AWS::EC2::SecurityGroup::Id>",
            "Description": "Assign Security Groups to the PSM instance."
        },
		"PSMInstanceSubnetId": {
            "Type": "AWS::EC2::Subnet::Id",
            "Description": "Select the Subnet Id where the PSM instance will reside."
        },
		"PSMPInstanceName": {
            "Type": "String",
            "Description": "Enter a name for the PSM SSH Proxy instance.",
            "Default": "CyberArk PSM SSH Proxy"
        },
		"PSMPInstanceType": {
            "Type": "String",
            "Description": "Select the instance type of the PSM SSH Proxy instance.",
            "AllowedValues": [
                "m4.large",
                "m4.xlarge",
                "m4.2xlarge",
                "m4.4xlarge"
            ],
            "Default": "m4.large"
        },
		"PSMPInstanceSecurityGroups": {
            "Type": "List<AWS::EC2::SecurityGroup::Id>",
            "Description": "Assign Security Groups to the PSM SSH Proxy instance."
        },
		"PSMPInstanceSubnetId": {
            "Type": "AWS::EC2::Subnet::Id",
            "Description": "Select the Subnet Id where the PSM SSH Proxy instance will reside."
        }
    },
    "Conditions": {
        "EULACondition": {
            "Fn::Equals": [
                "Accept",
                {
                    "Ref": "EULA"
                }
            ]
        }
    },
    "Rules": {
        "PasswordConfirmation": {
            "Assertions": [
              {
                "Assert" : {"Fn::Equals": [{"Ref": "VaultMasterPassword"}, {"Ref": "RetypeMasterPassword"}]},
                "AssertDescription": "The password confirmation does not match."
              },
			  {
                "Assert" : {"Fn::Equals": [{"Ref": "VaultAdminPassword"}, {"Ref": "RetypeAdminPassword"}]},
                "AssertDescription": "The password confirmation does not match."
              },
			  {
                "Assert" : {"Fn::Equals": [{"Ref": "VaultDRPassword"}, {"Ref": "RetypeDRPassword"}]},
                "AssertDescription": "The password confirmation does not match."
              }
            ] 
        }
    },
    "Metadata": {
        "AWS::CloudFormation::Interface": {
            "ParameterGroups": [
                {
                    "Label": {
                        "default": "General parameters"
                    },
                    "Parameters": [
                        "EULA",
                        "KeyName",
                        "VaultFilesBucket",
                        "LicenseFile",
                        "RecoveryPublicKey"
                    ]
                },
                {
                    "Label": {
                        "default": "Vault and Vault DR configuration"
                    },
                    "Parameters": [
                        "VaultInstanceName",
                        "VaultMasterPassword",
						"RetypeMasterPassword",					   
                        "VaultAdminPassword",
						"RetypeAdminPassword",
						"VaultDRPassword",
						"RetypeDRPassword",
                        "VaultInstanceType",
                        "VaultInstanceSecurityGroups",
                        "VaultInstanceSubnetId",
                        "DRInstanceSubnetId"
                    ]
                },
                {
                    "Label": {
                        "default": "CPM configuration"
                    },
                    "Parameters": [
                        "CPMInstanceName",
                        "CPMInstanceType",
                        "CPMInstanceSecurityGroups",
                        "CPMInstanceSubnetId"
                    ]
                },
                {
                    "Label": {
                        "default": "PVWA configuration"
                    },
                    "Parameters": [
                        "PVWAInstanceName",
                        "PVWAInstanceType",
                        "PVWAInstanceSecurityGroups",
                        "PVWAInstanceSubnetId"
                    ]
                },
                {
                    "Label": {
                        "default": "PSM configuration"
                    },
                    "Parameters": [
                        "PSMInstanceName",
                        "PSMInstanceType",
                        "PSMInstanceSecurityGroups",
						"PSMInstanceSubnetId"
                    ]
                },
				{
                    "Label": {
                        "default": "PSM SSH Proxy configuration"
                    },
                    "Parameters": [
                        "PSMPInstanceName",
                        "PSMPInstanceType",
                        "PSMPInstanceSecurityGroups",
						"PSMPInstanceSubnetId"
                    ]
                }
            ],
            "ParameterLabels": {
                "EULA": {
                    "default": "License Agreement"
                },
                "KeyName": {
                    "default": "Key Pair"
                },
                "VaultFilesBucket": {
                    "default": "Vault Files Bucket"
                },
                "LicenseFile": {
                    "default": "License File"
                },
                "RecoveryPublicKey": {
                    "default": "Recovery Public Key"
                },
                "VaultInstanceName": {
                    "default": "Vault Instance Name"
                },
                "VaultMasterPassword": {
                    "default": "Vault Master Password"
                },
				"RetypeMasterPassword": {
                    "default": "Retype Master Password"
                },
                "VaultAdminPassword": {
                    "default": "Vault Admin Password"
				},
				"RetypeAdminPassword": {
                    "default": "Retype Admin Password"
                },
				"VaultDRPassword": {
                    "default": "DR Password"
                },
				"RetypeDRPassword": {
                    "default": "Retype DR Password"
                },
                "VaultInstanceType": {
                    "default": "Vault and Vault DR Instance Type"
                },
                "VaultInstanceSecurityGroups": {
                    "default": "Vault Security Groups"
                },
                "VaultInstanceSubnetId": {
                    "default": "Vault Instance Subnet Id"
                },
                "DRInstanceSubnetId": {
                    "default": "Vault DR Instance Subnet Id"
                },
                "CPMInstanceName": {
                    "default": "CPM Instance Name"
                },
                "CPMInstanceType": {
                    "default": "CPM Instance Type"
                },
                "CPMInstanceSecurityGroups": {
                    "default": "CPM Instance Security Groups"
                },
                "CPMInstanceSubnetId": {
                    "default": "CPM Instance Subnet Id"
                },
                "PVWAInstanceName": {
                    "default": "PVWA Instance Name"
                },
                "PVWAInstanceType": {
                    "default": "PVWA Instance Type"
                },
                "PVWAInstanceSecurityGroups": {
                    "default": "PVWA Instance Security Groups"
                },
                "PVWAInstanceSubnetId": {
                    "default": "PVWA Instance Subnet Id"
                },
                "PSMInstanceName": {
                    "default": "PSM Instance Name"
                },
                "PSMInstanceType": {
                    "default": "PSM Instance Type"
                },
                "PSMInstanceSecurityGroups": {
                    "default": "PSM Instance Security Groups"
                },
				"PSMInstanceSubnetId": {
                    "default": "PSM Instance Subnet Id"
                },
				"PSMPInstanceName": {
                    "default": "PSM SSH Proxy Instance Name"
                },
				"PSMPInstanceType": {
                    "default": "PSM SSH Proxy Instance Type"
                },
				"PSMPInstanceSecurityGroups": {
                    "default": "PSM SSH Proxy Instance Security Groups"
                },
				"PSMPInstanceSubnetId": {
                    "default": "PSM SSH Proxy Instance Subnet Id"
                }
            }
        }
    },
    "Mappings": {
        "RegionMap": {
            "us-east-1": {
                "Vault": "ami-ae701ad4",
                "Components": "ami-5bc5ad21",
                "PSMP": "ami-6394ad75"
            },
            "us-east-2": {
                "Vault": "ami-506d4535",
                "Components": "ami-556c4430",
                "PSMP": "ami-600b2a05"
            },
            "us-west-1": {
                "Vault": "ami-fa62669a",
                "Components": "ami-276f6b47",
                "PSMP": "ami-d0416eb0"
            },
            "us-west-2": {
                "Vault": "ami-1f60c667",
                "Components": "ami-4665c33e",
                "PSMP": "ami-0508187c"
            },
            "ca-central-1": {
                "Vault": "ami-63bb0107",
                "Components": "ami-aec77dca",
                "PSMP": "ami-97853af3"
            },
			"eu-west-1": {
                "Vault": "ami-bd1792c4",
                "Components": "ami-4f1d9836",
                "PSMP": "ami-058f697c"
            },
			"eu-central-1": {
                "Vault": "ami-98bc34f7",
                "Components": "ami-2aba3245",
                "PSMP": "ami-b014b5df"
            },
            "eu-west-2": {
                "Vault": "ami-d95148bd",
                "Components": "ami-18534a7c",
                "PSMP": "ami-ecd2c488"
            },
			"ap-southeast-1": {
                "Vault": "ami-8b2c4cf7",
                "Components": "ami-2023435c",
                "PSMP": "ami-22810a41"
            },
			"ap-southeast-2": {
                "Vault": "ami-99a452fb",
                "Components": "ami-0db84e6f",
                "PSMP": "ami-63796b00"
            },
			"ap-northeast-2": {
                "Vault": "ami-fd52f493",
                "Components": "ami-e555f38b",
                "PSMP": "ami-1865ba76"
            },
			"ap-northeast-1": {
                "Vault": "ami-d59517b3",
                "Components": "ami-dd9311bb",
                "PSMP": "ami-fed5c899"
            },
            "ap-south-1": {
                "Vault": "ami-23bcf44c",
                "Components": "ami-b9bdf5d6",
                "PSMP": "ami-60fb850f"
            },
            "sa-east-1": {
                "Vault": "ami-cc6d2ba0",
                "Components": "ami-3b612757",
                "PSMP": "ami-a5ddb7c9"
            }
        }
    }
}
