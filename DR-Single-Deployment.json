{
    "Resources": {
        "DeployBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
                "AccessControl": "Private"
            },
            "Condition": "EULACondition",
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "fc7df917-b0b9-4452-9aaf-e71861744c7d"
                }
            }
        },
        "DeployBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
                "Bucket": {
                    "Ref": "DeployBucket"
                },
                "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "AWS": {
                                    "Fn::GetAtt": [
                                        "LambdaDeployRole",
                                        "Arn"
                                    ]
                                }
                            },
                            "Action": [
                                "s3:PutObject",
                                "s3:DeleteObject",
                                "s3:DeleteObjectVersion"
                            ],
                            "Resource": {
                                "Fn::Join": [
                                    "",
                                    [
                                        "arn:aws:s3:::",
                                        {
                                            "Ref": "DeployBucket"
                                        },
                                        "/*"
                                    ]
                                ]
                            }
                        },
                        {
                            "Sid": "DenyUnEncryptedObjectUploads",
                            "Effect": "Deny",
                            "Principal": "*",
                            "Action": "s3:PutObject",
                            "Resource": {
                                "Fn::Join": [
                                    "",
                                    [
                                        "arn:aws:s3:::",
                                        {
                                            "Ref": "DeployBucket"
                                        },
                                        "/*"
                                    ]
                                ]
                            },
                            "Condition": {
                                "StringNotEquals": {
                                    "s3:x-amz-server-side-encryption": "AES256"
                                }
                            }
                        },
                        {
                            "Sid": " DenyUnEncryptedInflightOperations",
                            "Effect": "Deny",
                            "Principal": "*",
                            "Action": "s3:*",
                            "Resource": {
                                "Fn::Join": [
                                    "",
                                    [
                                        "arn:aws:s3:::",
                                        {
                                            "Ref": "DeployBucket"
                                        },
                                        "/*"
                                    ]
                                ]
                            },
                            "Condition": {
                                "Bool": {
                                    "aws:SecureTransport": false
                                }
                            }
                        }
                    ]
                }
            },
            "Condition": "EULACondition",
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "e0f67985-8361-4891-b23a-860e90e37412"
                }
            }
        },
		"LambdaDeployRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "lambda.amazonaws.com"
                                ]
                            },
                            "Action": [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                },
                "Policies": [
                    {
                        "PolicyName": "CloudWatch",
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "logs:CreateLogGroup",
                                        "logs:CreateLogStream",
                                        "logs:DescribeLogGroups",
                                        "logs:DescribeLogStreams",
                                        "logs:PutLogEvents"
                                    ],
                                    "Resource": [
                                        "*"
                                    ]
                                }
                            ]
                        }
                    }
                ]
            },
            "Condition": "EULACondition",
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "23d3a636-2b70-4f0c-8849-9e7861edb7b6"
                }
            }
        },
        "StorePasswordLambda": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Description": "Encrypts given string and saves chipper to bucket",
                "Code": {
                    "ZipFile": {
                        "Fn::Join": [
                            "\n",
                            [
                                "import uuid",
                                "import boto3",
                                "import cfnresponse",
                                "",
                                "def createFile(bucket, file, body):",
                                "    s3Client = boto3.client('s3')",
                                "    return s3Client.put_object(",
                                "        Bucket = bucket,",
                                "        Key = file,",
                                "        ServerSideEncryption = 'AES256',",
                                "        Body = body",
                                "    )",
                                "",
                                "def deleteFile(bucket, file):",
                                "    s3Client = boto3.client('s3')",
                                "    return s3Client.delete_object(",
                                "        Bucket = bucket,",
                                "        Key = file",
                                "    )",
                                "",
                                "def lambda_handler(event, context):",
                                "",
                                "    physicalResourceId = str(uuid.uuid4())",
                                "    if 'PhysicalResourceId' in event:",
                                "        physicalResourceId = event['PhysicalResourceId']",
                                "",
                                "    for key in ['PlainText', 'BucketId']:",
                                "        if key not in event['ResourceProperties'] or not event['ResourceProperties'][key]:",
                                "            print 'The properties PlainText and BucketId must not be empty'",
                                "            return cfnresponse.send(event, context, cfnresponse.FAILED, {}, physicalResourceId)",
                                "",
                                "    try:",
                                "        if event['RequestType'] == 'Delete':",
                                "            deleteFile(event['ResourceProperties']['BucketId'], physicalResourceId)",
                                "            print 'The secret file deleted'",
                                "            return cfnresponse.send(event, context, cfnresponse.SUCCESS, {}, physicalResourceId)",
                                "",
                                "        if event['RequestType'] == 'Create':",
                                "            createFile(event['ResourceProperties']['BucketId'], physicalResourceId, event['ResourceProperties']['PlainText'])",
                                "            print 'The secret file created'",
                                "            response = { 'FileId': physicalResourceId }",
                                "            return cfnresponse.send(event, context, cfnresponse.SUCCESS, response, physicalResourceId)",
                                "",
                                "    except Exception as E:",
                                "        print E",
                                "        return cfnresponse.send(event, context, cfnresponse.FAILED, {}, physicalResourceId)"
                            ]
                        ]
                    }
                },
                "Runtime": "python2.7",
                "Handler": "index.lambda_handler",
                "Role": {
                    "Fn::GetAtt": [
                        "LambdaDeployRole",
                        "Arn"
                    ]
                }
            },
            "Condition": "EULACondition",
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "192fe816-1984-4ba5-a3f7-29055aad8c80"
                }
            }
        },
		"StoreMasterPassword": {
            "Type": "AWS::CloudFormation::CustomResource",
            "Version": "1.0",
            "Properties": {
                "ServiceToken": {
                    "Fn::GetAtt": [
                        "StorePasswordLambda",
                        "Arn"
                    ]
                },
                "BucketId": {
                    "Ref": "DeployBucket"
                },
                "PlainText": {
                    "Ref": "VaultMasterPassword"
                }
            },
            "Condition": "EULACondition",
            "DependsOn": [
                "LambdaDeployRole",
                "DeployBucketPolicy",
                "StorePasswordLambda",
                "DeployBucket"
            ]
        },
		"StoreAdminPassword": {
            "Type": "AWS::CloudFormation::CustomResource",
            "Properties": {
                "ServiceToken": {
                    "Fn::GetAtt": [
                        "StorePasswordLambda",
                        "Arn"
                    ]
                },
                "BucketId": {
                    "Ref": "DeployBucket"
                },
                "PlainText": {
                    "Ref": "VaultAdminPassword"
                }
            },
            "Condition": "EULACondition",
            "DependsOn": [
                "LambdaDeployRole",
                "DeployBucketPolicy",
                "StorePasswordLambda",
                "DeployBucket"
            ]
        },
		"VaultDRMachine": {
            "Type": "AWS::EC2::Instance",
            "Properties": {
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Join": [
                                "",
                                [
                                    {
                                        "Ref": "VaultInstanceName"
                                    }
                                ]
                            ]
                        }
                    }
                ],
                "SecurityGroupIds": {
                    "Ref": "VaultInstanceSecurityGroups"
                },
                "SubnetId": {
                    "Ref": "DRInstanceSubnetId"
                },
                "ImageId": {
                    "Fn::FindInMap": [
                        "RegionMap",
                        {
                            "Ref": "AWS::Region"
                        },
                        "Vault"
                    ]
                },
                "InstanceType": {
                    "Ref": "VaultInstanceType"
                },
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "<script>\n",
                                "cfn-init.exe -v -s ",
                                {
                                    "Ref": "AWS::StackId"
                                },
                                " -r VaultDRMachine",
                                " --region ",
                                {
                                    "Ref": "AWS::Region"
                                },
                                "\n",
                                "cfn-signal.exe -e %ERRORLEVEL% ",
                                "  --stack ",
                                {
                                    "Ref": "AWS::StackName"
                                },
                                "  --resource VaultDRMachine",
                                "  --region ",
                                {
                                    "Ref": "AWS::Region"
                                },
                                "\n",
                                "</script>"
                            ]
                        ]
                    }
                },
                "KeyName": {
                    "Ref": "KeyName"
                },
                "IamInstanceProfile": {
                    "Ref": "VaultInstancesProfile"
                }
            },
            "Metadata": {
                "AWS::CloudFormation::Init": {
                    "config": {
                        "files": {
                            "C:\\deploy.py": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "import boto3\n",
                                            "import sys\n",
                                            "import subprocess\n",
                                            "\n",
                                            "def fetchPassword(bucket,filePath):\n",
                                            "\ts3Client = boto3.client('s3', config= boto3.session.Config(signature_version='s3v4'))\n",
                                            "\tobjectResponse = s3Client.get_object(\n",
                                            "\t\tBucket = bucket,\n",
                                            "\t\tKey = filePath\n",
                                            "\t)\n",
                                            "\treturn objectResponse['Body'].read()\n",
                                            "\n",
                                            "def downloadFile(bucket,filePath,target):\n",
                                            "\ts3Client = boto3.client('s3')\n",
                                            "\ts3Client.download_file(\n",
                                            "\t\tBucket = bucket,\n",
                                            "\t\tKey = filePath,\n",
                                            "\t\tFilename = target\n",
                                            "\t)\n",
                                            "\treturn target\n",
                                            "\n",
                                            "masterp = fetchPassword('",
                                            {
                                                "Ref": "DeployBucket"
                                            },
                                            "','",
                                            {
                                                "Fn::GetAtt": [
                                                    "StoreMasterPassword",
                                                    "FileId"
                                                ]
                                            },
                                            "')\n",
                                            "adminp = fetchPassword('",
                                            {
                                                "Ref": "DeployBucket"
                                            },
                                            "','",
                                            {
                                                "Fn::GetAtt": [
                                                    "StoreAdminPassword",
                                                    "FileId"
                                                ]
                                            },
                                            "')\n",
                                            "drp = fetchPassword('",
                                            {
                                                "Ref": "DeployBucket"
                                            },
                                            "','",
                                            {
                                                "Fn::GetAtt": [
                                                    "StoreDRPassword",
                                                    "FileId"
                                                ]
                                            },
                                            "')\n",
                                            "\n",
                                            "licensef = downloadFile('",
                                            {
                                                "Ref": "VaultFilesBucket"
                                            },
                                            "','",
                                            {
                                                "Ref": "LicenseFile"
                                            },
                                            "','C:\\\\vaultLicense.xml')\n",
                                            "publickeyf = downloadFile('",
                                            {
                                                "Ref": "VaultFilesBucket"
                                            },
                                            "','",
                                            {
                                                "Ref": "RecoveryPublicKey"
                                            },
                                            "','C:\\\\recoveryPublic.key')\n",
                                            "\n",
                                            "vaultIp = '",
                                            {
                                                "Ref": "VaultPrivateIP"
                                            },
                                            "'\n",
                                            "sys.exit(subprocess.call([",
                                            "'C:\\\\Program files (x86)\\\\PrivateArk\\\\Server\\\\CAVaultManager.exe',",
                                            "'PostInstall',",
                                            "'/AdminPass',",
                                            "adminp,",
                                            "'/MasterPass',",
                                            "masterp,",
                                            "'/RecPub',",
                                            "publickeyf,",
                                            "'/IsPrimaryOrDR',",
                                            "'DR',",
                                            "'/PrimaryVaultIP',",
                                            "vaultIp,",
                                            "'/DRPassword',",
                                            "drp,",
                                            "'/EnableFailOver',",
                                            "'/LicensePath',",
                                            "licensef,",
                                            "'/AcceptEULA',",
                                            "'yes',",
											"'/KMSRegion','",
											{
												"Ref": "AWS::Region"
											},
                                            "']))\n"
                                        ]
                                    ]
                                }
                            },
                            "C:\\clean.py": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "import boto3\n",
                                            "\n",
                                            "def deleteFile(bucket,filePath):\n",
                                            "\ts3Client = boto3.client('s3', config= boto3.session.Config(signature_version='s3v4'))\n",
                                            "\treturn s3Client.delete_object(\n",
                                            "\t\tBucket = bucket,\n",
                                            "\t\tKey = filePath\n",
                                            "\t)",
                                            "\n",
                                            "print deleteFile('",
                                            {
                                                "Ref": "DeployBucket"
                                            },
                                            "','",
                                            {
                                                "Fn::GetAtt": [
                                                    "StoreMasterPassword",
                                                    "FileId"
                                                ]
                                            },
                                            "')\n",
                                            "print deleteFile('",
                                            {
                                                "Ref": "DeployBucket"
                                            },
                                            "','",
                                            {
                                                "Fn::GetAtt": [
                                                    "StoreDRPassword",
                                                    "FileId"
                                                ]
                                            },
                                            "')\n",
											"print deleteFile('",
                                            {
                                                "Ref": "DeployBucket"
                                            },
                                            "','",
                                            {
                                                "Fn::GetAtt": [
                                                    "StoreAdminPassword",
                                                    "FileId"
                                                ]
                                            },
                                            "')\n"
                                        ]
                                    ]
                                }
                            }
                        },
                        "commands": {
                            "1-deploy": {
                                "command": "C:\\Python27\\python.exe C:\\deploy.py",
								"waitAfterCompletion": "0"
                            },
                            "2-clean": {
                                "command": "C:\\Python27\\python.exe C:\\clean.py",
								"waitAfterCompletion": "0"
                            },
							"3-ChangeHostName" : {
								"command" : {
									"Fn::Join": [
										"",
										[
											"powershell.exe -Command Rename-Computer -NewName ",
											{ "Ref": "VaultHostName" },
											" -Force -Restart"
										]
									]
								},
								"waitAfterCompletion" : "forever"
							}
                        }
                    }
                }
            },
            "CreationPolicy": {
                "ResourceSignal": {
                    "Timeout": "PT15M"
                }
            },
			"DependsOn": [
                "StoreMasterPassword",
                "StoreAdminPassword",
                "StoreDRPassword"
            ],
            "Condition": "",
            "DeletionPolicy": "Retain"
        },
        "StoreDRPassword": {
            "Type": "AWS::CloudFormation::CustomResource",
            "Properties": {
                "ServiceToken": {
                    "Fn::GetAtt": [
                        "StorePasswordLambda",
                        "Arn"
                    ]
                },
                "BucketId": {
                    "Ref": "DeployBucket"
                },
                "PlainText": {
                    "Ref": "VaultDRPassword"
                }
            },
            "Condition": "EULACondition",
            "DependsOn": [
                "LambdaDeployRole",
                "DeployBucketPolicy",
                "StorePasswordLambda",
                "DeployBucket"
            ]
        },
		"VaultInstancesS3VaultFilesBucketPolicy": {
            "Type": "AWS::IAM::Policy",
            "Properties": {
                "PolicyName": "VaultFilesBucketAccess",
                "PolicyDocument": {
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Action": [
                                "s3:GetObject",
                                "s3:GetObjectVersion"
                            ],
                            "Resource": {
                                "Fn::Join": [
                                    "",
                                    [
                                        "arn:aws:s3:::",
                                        {
                                            "Ref": "VaultFilesBucket"
                                        },
                                        "/*"
                                    ]
                                ]
                            }
                        }
                    ]
                },
                "Roles": [
                    {
                        "Ref": "VaultInstancesRole"
                    }
                ]
            },
            "Condition": "EULACondition"
        },
        "VaultInstancesS3DeployBucketPolicy": {
            "Type": "AWS::IAM::Policy",
            "Properties": {
                "PolicyName": "VaultInsancesDeployBucketAccess",
                "PolicyDocument": {
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Action": [
                                "s3:GetObject",
                                "s3:GetObjectVersion",
                                "s3:DeleteObject",
                                "s3:DeleteObjectVersion"
                            ],
                            "Resource": {
                                "Fn::Join": [
                                    "",
                                    [
                                        "arn:aws:s3:::",
                                        {
                                            "Ref": "DeployBucket"
                                        },
                                        "/*"
                                    ]
                                ]
                            }
                        }
                    ]
                },
                "Roles": [
                    {
                        "Ref": "VaultInstancesRole"
                    }
                ]
            },
            "Condition": "EULACondition"
        },
		"VaultInstancesRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "ec2.amazonaws.com"
                                ]
                            },
                            "Action": [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                },
                "Path": "/"
            },
            "Condition": "EULACondition",
            "DeletionPolicy": "Retain"
        },
		"VaultInstancesProfile": {
            "Type": "AWS::IAM::InstanceProfile",
            "Properties": {
                "Path": "/",
                "Roles": [
                    {
                        "Ref": "VaultInstancesRole"
                    }
                ]
            },
            "Condition": "EULACondition",
            "DeletionPolicy": "Retain"
        },
		"VaultInstancesKMSPolicy": {
            "Type": "AWS::IAM::Policy",
            "Properties": {
                "PolicyName": "VaultInstancesKMSAccess",
                "PolicyDocument": {
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Action": [
                                "kms:Encrypt",
                                "kms:Decrypt"
                            ],
                            "Resource": "*"
                        }
                    ]
                },
                "Roles": [
                    {
                        "Ref": "VaultInstancesRole"
                    }
                ]
            },
            "Condition": "EULACondition",
            "DeletionPolicy": "Retain"
        },
		"VaultBootstrapKMSPolicy": {
            "Type": "AWS::IAM::Policy",
            "Properties": {
                "PolicyName": "VaultBootstrapKMSAccess",
                "PolicyDocument": {
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Action": [
                                "kms:CreateKey",
                                "kms:GenerateRandom"
                            ],
                            "Resource": "*"
                        }
                    ]
                },
                "Roles": [
                    {
                        "Ref": "VaultInstancesRole"
                    }
                ]
            }
        }
    },
    "Parameters": {
        "EULA": {
            "Type": "String",
            "Description": "I have read and agree to the Terms and Conditions.",
            "AllowedValues": [
                "Accept",
                "Decline"
            ],
            "Default": "Decline"
        },
        "KeyName": {
            "Type": "AWS::EC2::KeyPair::KeyName",
            "Description": "Select an existing Key Pair from your AWS account.",
            "ConstraintDescription": "Can contain only ASCII characters."
        },
        "VaultFilesBucket": {
            "Type": "String",
            "Description": "Enter the name of the bucket containing the license and recovery public key."
        },
        "LicenseFile": {
            "Type": "String",
            "Description": "Enter the path of the license file within the bucket.",
            "Default": "license.xml"
        },
        "RecoveryPublicKey": {
            "Type": "String",
            "Description": "Enter the path of the recovery public key file within the bucket.",
            "Default": "recpub.key"
        },
        "VaultPrivateIP": {
            "Type": "String",
            "Description": "Enter the Vault Private IP."
        },
		"VaultAdminPassword": {
            "Type": "String",
            "Description": "Enter a password for the Vault Administrator user.",
            "NoEcho": true,
			"MinLength": 8
        },
        "VaultMasterPassword": {
            "Type": "String",
            "Description": "Enter a password for the Vault DR Master user.",
            "NoEcho": true,
			"MinLength": 8
        },
		"RetypeMasterPassword": {
            "Type": "String",
            "Description": "Retype the password for the Vault DR Master user.",
            "NoEcho": true,
			"MinLength": 8
        },
        "VaultDRPassword": {
            "Type": "String",
            "Description": "Enter a password for the Vault DR user.",
            "NoEcho": true,
            "MinLength": 8
        },
        "RetypeDRPassword": {
            "Type": "String",
            "Description": "Retype the password for the Vault DR user.",
            "NoEcho": true,
            "MinLength": 8
        },
        "VaultInstanceName": {
            "Type": "String",
            "Description": "Enter a name for the Vault DR instance.",
            "Default": "CyberArk Vault"
        },
		"VaultHostName": {
            "Type": "String",
            "Description": "Enter the host name for the Vault DR instance.",
			"MinLength": 4
        },
        "VaultInstanceType": {
            "Type": "String",
            "Description": "Select the instance type of the Vault DR instance.",
            "AllowedValues": [
                "m4.large",
                "m4.xlarge",
                "m4.2xlarge",
                "m4.4xlarge"
            ],
            "Default": "m4.large"
        },
        "VaultInstanceSecurityGroups": {
            "Type": "List<AWS::EC2::SecurityGroup::Id>",
            "Description": "Assign Security Groups to the Vault DR instance."
        },
        "DRInstanceSubnetId": {
            "Type": "AWS::EC2::Subnet::Id",
            "Description": "Select the Subnet Id where the Vault DR instance will reside."
        }
    },
    "Conditions": {
        "EULACondition": {
            "Fn::Equals": [
                "Accept",
                {
                    "Ref": "EULA"
                }
            ]
        }
    },
    "Rules": {
        "PasswordConfirmation": {
            "Assertions": [
                {
                    "Assert" : {"Fn::Equals": [{"Ref": "VaultMasterPassword"}, {"Ref": "RetypeMasterPassword"}]},
                    "AssertDescription": "The password confirmation does not match."
                },
                {
                    "Assert" : {"Fn::Equals": [{"Ref": "VaultDRPassword"}, {"Ref": "RetypeDRPassword"}]},
                    "AssertDescription": "The password confirmation does not match."
                }
            ]
        }
    },
    "Metadata": {
        "AWS::CloudFormation::Interface": {
            "ParameterGroups": [
                {
                    "Label": {
                        "default": "General parameters"
                    },
                    "Parameters": [
                        "EULA",
                        "KeyName",
                        "VaultFilesBucket",
                        "LicenseFile",
                        "RecoveryPublicKey"
                    ]
                },
                {
                    "Label": {
                        "default": "DR Vault information"
                    },
                    "Parameters": [
                        "VaultPrivateIP",
						"VaultAdminPassword",
                        "VaultDRPassword",
                        "RetypeDRPassword",
                        "VaultMasterPassword",
                        "RetypeMasterPassword",
                        "VaultInstanceName",
						"VaultHostName",
                        "VaultInstanceType",
                        "VaultInstanceSecurityGroups",
                        "DRInstanceSubnetId"
                    ]
                }
                
            ],
            "ParameterLabels": {
                "EULA": {
                    "default": "License Agreement"
                },
                "KeyName": {
                    "default": "Key Pair"
                },
                "VaultFilesBucket": {
                    "default": "Vault Files Bucket"
                },
                "LicenseFile": {
                    "default": "License File"
                },
                "RecoveryPublicKey": {
                    "default": "Recovery Public Key"
                },
                "VaultPrivateIP": {
                    "default": "Vault Private IP"
                },
				"VaultAdminPassword": {
                    "default": "Vault Admin Password"
                },
                "VaultMasterPassword": {
                    "default": "Vault DR Master Password"
                },
				"RetypeMasterPassword": {
                    "default": "Retype Vault DR Master Password"
                },
                "VaultDRPassword": {
                    "default": "Vault DR Password"
                },
                "RetypeDRPassword": {
                    "default": "Retype Vault DR Password"
                },
                "VaultInstanceName": {
                    "default": "Vault DR Instance Name"
                },
				"VaultHostName": {
                    "default": "Vault DR Host Name"
                },
                "VaultInstanceType": {
                    "default": "Vault DR Instance Type"
                },
                "VaultInstanceSecurityGroups": {
                    "default": "Vault DR Instance Security Groups"
                },
                "DRInstanceSubnetId": {
                    "default": "Vault DR Instance Subnet Id"
                }
            }
        }
    },
    "Mappings": {
        "RegionMap": {
            "us-east-1": {
                "Vault": "ami-ae701ad4",
                "Components": "ami-5bc5ad21",
                "PSMP": "ami-6394ad75"
            },
            "us-east-2": {
                "Vault": "ami-1192b874",
                "Components": "ami-1092b875",
                "PSMP": "ami-600b2a05"
            },
            "us-west-1": {
                "Vault": "ami-fa62669a",
                "Components": "ami-276f6b47",
                "PSMP": "ami-d0416eb0"
            },
            "us-west-2": {
                "Vault": "ami-1f60c667",
                "Components": "ami-4665c33e",
                "PSMP": "ami-0508187c"
            },
            "ca-central-1": {
                "Vault": "ami-63bb0107",
                "Components": "ami-aec77dca",
                "PSMP": "ami-97853af3"
            },
            "eu-west-1": {
                "Vault": "ami-bd1792c4",
                "Components": "ami-4f1d9836",
                "PSMP": "ami-058f697c"
            },
            "eu-central-1": {
                "Vault": "ami-98bc34f7",
                "Components": "ami-2aba3245",
                "PSMP": "ami-b014b5df"
            },
            "eu-west-2": {
                "Vault": "ami-d95148bd",
                "Components": "ami-18534a7c",
                "PSMP": "ami-ecd2c488"
            },
            "ap-southeast-1": {
                "Vault": "ami-8b2c4cf7",
                "Components": "ami-2023435c",
                "PSMP": "ami-22810a41"
            },
            "ap-southeast-2": {
                "Vault": "ami-99a452fb",
                "Components": "ami-0db84e6f",
                "PSMP": "ami-63796b00"
            },
            "ap-northeast-2": {
                "Vault": "ami-fd52f493",
                "Components": "ami-e555f38b",
                "PSMP": "ami-1865ba76"
            },
            "ap-northeast-1": {
                "Vault": "ami-d59517b3",
                "Components": "ami-dd9311bb",
                "PSMP": "ami-fed5c899"
            },
            "ap-south-1": {
                "Vault": "ami-23bcf44c",
                "Components": "ami-b9bdf5d6",
                "PSMP": "ami-60fb850f"
            },
            "sa-east-1": {
                "Vault": "ami-cc6d2ba0",
                "Components": "ami-3b612757",
                "PSMP": "ami-a5ddb7c9"
            }
        }
    }
}

